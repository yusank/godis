package main

import (
	"bufio"
	"flag"
	"io/fs"
	"log"
	"os"
	"path/filepath"
	"regexp"
	"strings"
	"text/template"
)

func main() {
	var dir string
	flag.StringVar(&dir, "d", "", "read and parse redis command implement")
	flag.Parse()

	if dir == "" {
		panic("must provide dir params")
	}

	kvMap, err := readAndParseFile(dir)
	if err != nil {
		panic(err)
	}

	if err = writeFiles(kvMap); err != nil {
		panic(err)
	}
}

type KV struct {
	CmdName  string
	FuncName string
}

const (
	generatedFileSuffix = ".cmd.go"
)

func readAndParseFile(fp string) (map[string][]KV, error) {
	var kvMap = make(map[string][]KV)
	err := filepath.Walk(fp, func(path string, info fs.FileInfo, err error) error {
		log.Println(path, info.Name())
		if info.IsDir() {
			return nil
		}

		if !strings.HasSuffix(info.Name(), ".go") {
			return nil
		}

		if strings.HasSuffix(info.Name(), generatedFileSuffix) {
			return nil
		}

		f, err1 := os.Open(path)
		if err1 != nil {
			return err1
		}
		defer noOp(f.Close)

		var (
			scanner  = bufio.NewScanner(f)
			lastLine string // for read func comment
		)
		for scanner.Scan() {

			fName := regexCmdFuncStr(scanner.Text())
			if fName != "" {
				kvs, ok := kvMap[path]
				if !ok {
					kvs = make([]KV, 0)
				}

				kv := KV{
					CmdName:  strings.ToLower(fName),
					FuncName: fName,
				}

				if lastLine != "" {
					kv.CmdName = strings.ToLower(
						strings.TrimSpace(
							strings.TrimPrefix(
								strings.TrimSuffix(lastLine, "."),
								"//"),
						),
					)
				}

				kvs = append(kvs, kv)
				kvMap[path] = kvs
			}

			lastLine = strings.TrimSpace(scanner.Text())
		}

		return nil
	})

	if err != nil {
		return nil, err
	}

	return kvMap, nil
}

func writeFiles(kvMap map[string][]KV) error {
	for name, kvs := range kvMap {
		name = strings.Replace(name, ".go", generatedFileSuffix, 1)
		if err := writeFile(name, kvs); err != nil {
			return err
		}
	}

	return nil
}

func writeFile(name string, kvs []KV) error {
	f, err := os.Create(name)
	if err != nil {
		return err
	}
	defer noOp(f.Close)

	tmpl, err := template.New(name).Parse(templateText)
	if err != nil {
		return err
	}

	if err = tmpl.Execute(f, kvs); err != nil {
		return err
	}

	return nil
}

var templateText = `// Code generated by gen_redis_cmd. DO NOT EDIT.

package redis

func init() {
{{- range . }}
	implementedCommands["{{ .CmdName }}"] = {{ .FuncName }}
{{- end }}
}
`

// regex

var fNameRegex *regexp.Regexp

func init() {
	r, err := regexp.Compile(`func\s+([A-Za-z]+)\(c \*Command\)\s+\(\*protocol.Response,\s+error\)`)
	if err != nil {
		panic(err)
	}

	fNameRegex = r
}

func regexCmdFuncStr(str string) string {
	res := fNameRegex.FindStringSubmatch(str)
	if len(res) < 2 {
		return ""
	}

	log.Println(res)
	return res[1]
}

func noOp(f func() error) {
	_ = f()
}
