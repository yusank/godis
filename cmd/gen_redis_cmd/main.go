package main

import (
	"bufio"
	"log"
	"os"
	"regexp"
	"strings"
	"text/template"
)

func main() {
	var fPath string
	if len(os.Args) != 2 {
		panic("must provide dir params")
	}
	fPath = os.Args[1]

	log.Println("start generating file: ", fPath)
	kvs, err := readAndParseFile(fPath)
	if err != nil {
		panic(err)
	}

	if err = writeFile(fPath, kvs); err != nil {
		panic(err)
	}
}

type KV struct {
	CmdName  string
	FuncName string
}

const (
	generatedFileSuffix = ".cmd.go"
)

func readAndParseFile(fp string) ([]KV, error) {
	var kvs = make([]KV, 0)
	if !strings.HasSuffix(fp, ".go") {
		return nil, nil
	}

	if strings.HasSuffix(fp, generatedFileSuffix) {
		return nil, nil
	}

	f, err := os.Open(fp)
	if err != nil {
		return nil, err
	}
	defer noOp(f.Close)

	var (
		scanner  = bufio.NewScanner(f)
		lastLine string // for read func comment
	)

	for scanner.Scan() {
		fName := regexCmdFuncStr(scanner.Text())
		if fName != "" {
			kv := KV{
				CmdName:  strings.ToLower(fName),
				FuncName: fName,
			}

			if lastLine != "" {
				kv.CmdName = strings.ToLower(
					strings.TrimSpace(
						strings.TrimPrefix(
							strings.TrimSuffix(lastLine, "."),
							"//"),
					),
				)
			}

			kvs = append(kvs, kv)
		}
		lastLine = strings.TrimSpace(scanner.Text())

		if err != nil {
			return nil, err
		}
	}

	return kvs, nil
}

func writeFile(name string, kvs []KV) error {
	name = strings.Replace(name, ".go", generatedFileSuffix, 1)
	f, err := os.Create(name)
	if err != nil {
		return err
	}
	defer noOp(f.Close)

	tmpl, err := template.New(name).Parse(templateText)
	if err != nil {
		return err
	}

	if err = tmpl.Execute(f, kvs); err != nil {
		return err
	}

	log.Println("write file: ", name)
	return nil
}

var templateText = `// Code generated by gen_redis_cmd. DO NOT EDIT.

package redis

func init() {
{{- range . }}
	implementedCommands["{{ .CmdName }}"] = {{ .FuncName }}
{{- end }}
}
`

// regex

var fNameRegex *regexp.Regexp

func init() {
	r, err := regexp.Compile(`func\s+([A-Za-z]+)\(c \*Command\)\s+\(\*protocol.Response,\s+error\)`)
	if err != nil {
		panic(err)
	}

	fNameRegex = r
}

func regexCmdFuncStr(str string) string {
	res := fNameRegex.FindStringSubmatch(str)
	if len(res) < 2 {
		return ""
	}

	//log.Println(res)
	return res[1]
}

func noOp(f func() error) {
	_ = f()
}
